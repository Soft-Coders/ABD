-- ABRIR_CUENTA IDEAL SEGREGADA
BEGIN
    T_IBAN := 'TEST_ABRIR_CUENTA_IDEAL_SEGREGADA';
    CUENTA_ABIERTA CUENTA.CUENTA_ID%TYPE;

	PK_GESTION_CUENTAS.ABRIR_CUENTA(T_IBAN, NULL, 1, 'ACTIVO', SYSDATE, NULL, 'PRUEBA_SEGREGADA', 0, 1);

    SELECT CUENTA_ID INTO CUENTA_ABIERTA FROM CUENTA WHERE IBAN LIKE T_IBAN;
    IF CUENTA_ID IS NULL THEN
        RAISE_APPLICATION_ERROR(-2001, 'TEST_ABRIR_CUENTA_IDEAL_SEGREGADA: CUENTA NO CREADA');
    END IF;

    SELECT CUENTA_CUENTA_ID INTO CUENTA_ABIERTA FROM CUENTA_FINTECH WHERE IBAN LIKE T_IBAN;
    IF CUENTA_ID IS NULL THEN
        RAISE_APPLICATION_ERROR(-2002, 'TEST_ABRIR_CUENTA_IDEAL_SEGREGADA: CUENTA FINTECH NO CREADA');
    END IF;

    SELECT CUENTA_FINTECH_ID INTO CUENTA_ABIERTA FROM SEGREGADA WHERE IBAN LIKE T_IBAN;
    IF CUENTA_ID IS NULL THEN
        RAISE_APPLICATION_ERROR(-2003, 'TEST_ABRIR_CUENTA_IDEAL_SEGREGADA: CUENTA SEGREGADA NO CREADA');
    END IF;

	EXCEPTION
		WHEN OTHERS THEN
			RAISE_APPLICATION_ERROR(-2000, 'UNEXPECTED EXCEPTION');
END;

-- ABRIR_CUENTA IDEAL POOLED
BEGIN
    T_IBAN := 'TEST_ABRIR_CUENTA_IDEAL_POOLED';
    CUENTA_ABIERTA CUENTA.CUENTA_ID%TYPE;
    
	PK_GESTION_CUENTAS.ABRIR_CUENTA(T_IBAN, NULL, 1, 'ACTIVO', SYSDATE, NULL, 'PRUEBA_POOLED', 0, NULL);
	
    SELECT CUENTA_ID INTO CUENTA_ABIERTA FROM CUENTA WHERE IBAN LIKE T_IBAN;
    IF CUENTA_ID IS NULL THEN
        RAISE_APPLICATION_ERROR(-2001, 'TEST_ABRIR_CUENTA_IDEAL_POOLED: CUENTA NO CREADA');
    END IF;

    SELECT CUENTA_CUENTA_ID INTO CUENTA_ABIERTA FROM CUENTA_FINTECH WHERE IBAN LIKE T_IBAN;
    IF CUENTA_ID IS NULL THEN
        RAISE_APPLICATION_ERROR(-2002, 'TEST_ABRIR_CUENTA_IDEAL_POOLED: CUENTA FINTECH NO CREADA');
    END IF;

    SELECT CUENTA_FINTECH_ID INTO CUENTA_ABIERTA FROM POOLED_ACCOUNT WHERE IBAN LIKE T_IBAN;
    IF CUENTA_ID IS NULL THEN
        RAISE_APPLICATION_ERROR(-2003, 'TEST_ABRIR_CUENTA_IDEAL_POOLED: CUENTA POOLED NO CREADA');
    END IF;
    
    EXCEPTION
		WHEN OTHERS THEN
			RAISE_APPLICATION_ERROR(-2000, 'UNEXPECTED EXCEPTION');
END;

-- CERRAR_CUENTA IDEAL SEGREGADA
BEGIN
    T_IBAN := 'TEST_ABRIR_CUENTA_IDEAL_SEGREGADA';
    CUENTA_ABIERTA CUENTA.CUENTA_ID%TYPE;
    T_ESTADO CUENTA_FINTECH.ESTADO%TYPE;

	PK_GESTION_CUENTAS.CERRAR_CUENTA(T_IBAN);
	
    SELECT CUENTA_FINTECH_ID INTO CUENTA_ABIERTA FROM SEGREGADA WHERE IBAN LIKE T_IBAN;
    IF CUENTA_ID IS NULL THEN
        RAISE_APPLICATION_ERROR(-2004, 'TEST_CERRAR_CUENTA_IDEAL_SEGREGADA: CUENTA SEGREGADA NO ENCONTRADA SIN EXCEPTION');
    END IF;

    SELECT ESTADO INTO T_ESTADO FROM CUENTA_FINTECH WHERE IBAN LIKE T_IBAN;
    IF T_ESTADO NOT LIKE 'INACTIV[AOE]' THEN
        RAISE_APPLICATION_ERROR(-2005, 'TEST_CERRAR_CUENTA_IDEAL_SEGREGADA: ESTADO NO INACTIVO');
    END IF;

	PK_GESTION_CUENTAS.CERRAR_CUENTA(T_IBAN);
	EXCEPTION
		WHEN OTHERS THEN
			RAISE_APPLICATION_ERROR(-2000, 'UNEXPECTED EXCEPTION');
END;

-- CERRAR_CUENTA IDEAL POOLED
BEGIN
    T_IBAN := 'TEST_ABRIR_CUENTA_IDEAL_POOLED';
    CUENTA_ABIERTA CUENTA.CUENTA_ID%TYPE;
    T_ESTADO CUENTA_FINTECH.ESTADO%TYPE;

	PK_GESTION_CUENTAS.CERRAR_CUENTA(T_IBAN);
	
    SELECT CUENTA_FINTECH_ID INTO CUENTA_ABIERTA FROM POOLED_ACCOUNT WHERE IBAN LIKE T_IBAN;
    IF CUENTA_ID IS NULL THEN
        RAISE_APPLICATION_ERROR(-2004, 'TEST_CERRAR_CUENTA_IDEAL_POOLED: CUENTA POOLED NO ENCONTRADA SIN EXCEPTION');
    END IF;

    SELECT ESTADO INTO T_ESTADO FROM CUENTA_FINTECH WHERE IBAN LIKE T_IBAN;
    IF T_ESTADO NOT LIKE 'INACTIV[AOE]' THEN
        RAISE_APPLICATION_ERROR(-2005, 'TEST_CERRAR_CUENTA_IDEAL_POOLED: ESTADO NO INACTIVO');
    END IF;
    
    EXCEPTION
		WHEN OTHERS THEN
			RAISE_APPLICATION_ERROR(-2000, 'UNEXPECTED EXCEPTION');
END;